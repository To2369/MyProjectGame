//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer GAUSSIAN_FILTER
// {
//
//   float4 weights[625];               // Offset:    0 Size: 10000
//   float kernelSize;                  // Offset: 10000 Size:     4
//   float2 texcel;                     // Offset: 10004 Size:     8
//   float dummy;                       // Offset: 10012 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler0                          sampler      NA          NA             s0      1 
// texture0                          texture  float4          2d             t0      1 
// GAUSSIAN_FILTER                   cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[626], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 3
mul r0.x, cb1[625].x, cb1[625].x
mov r1.xyz, l(0,0,0,0)
mov r0.y, l(0)
loop 
  itof r0.z, r0.y
  ge r0.z, r0.z, r0.x
  breakc_nz r0.z
  mad r0.zw, cb1[625].yyyz, cb1[r0.y + 0].xxxy, v2.xxxy
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.zwzz, t0.xyzw, s0
  mad r1.xyz, r2.xyzx, cb1[r0.y + 0].zzzz, r1.xyzx
  iadd r0.y, r0.y, l(1)
endloop 
mov r1.w, l(1.000000)
mul o0.xyzw, r1.xyzw, v1.xyzw
ret 
// Approximately 15 instruction slots used
