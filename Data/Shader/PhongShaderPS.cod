//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECT_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 ka;                         // Offset:   64 Size:    16
//   float4 kd;                         // Offset:   80 Size:    16
//   float4 ks;                         // Offset:   96 Size:    16
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64 [unused]
//   float4 options;                    // Offset:   64 Size:    16 [unused]
//   float4 camera_position;            // Offset:   80 Size:    16
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 ambient_color;              // Offset:    0 Size:    16
//   float4 directional_light_direction;// Offset:   16 Size:    16
//   float4 directional_light_color;    // Offset:   32 Size:    16
//   
//   struct point_lights
//   {
//       
//       float4 position;               // Offset:   48
//       float4 color;                  // Offset:   64
//       float range;                   // Offset:   80
//       float3 dummy;                  // Offset:   84
//
//   } point_light[8];                  // Offset:   48 Size:   384
//   
//   struct spot_lights
//   {
//       
//       float4 position;               // Offset:  432
//       float4 direction;              // Offset:  448
//       float4 color;                  // Offset:  464
//       float range;                   // Offset:  480
//       float innerCorn;               // Offset:  484
//       float outerCorn;               // Offset:  488
//       float dummy;                   // Offset:  492
//
//   } spot_light[8];                   // Offset:  432 Size:   512
//
// }
//
// cbuffer HEMISPHERE_LLIGHT_CONSTANT_BUFFER
// {
//
//   float4 sky_color;                  // Offset:    0 Size:    16
//   float4 ground_color;               // Offset:   16 Size:    16
//   float4 hemisphere_weight;          // Offset:   32 Size:    16
//
// }
//
// cbuffer FOG_CONSTANT_BUFFER
// {
//
//   float4 fog_color;                  // Offset:    0 Size:    16
//   float4 fog_range;                  // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// color_sampler_states[2]           sampler      NA          NA             s2      1 
// color_map                         texture  float4          2d             t0      1 
// normal_map                        texture  float4          2d             t1      1 
// OBJECT_CONSTANT_BUFFER            cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
// HEMISPHERE_LLIGHT_CONSTANT_BUFFER    cbuffer      NA          NA            cb4      1 
// FOG_CONSTANT_BUFFER               cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyz         2     NONE   float   xyz 
// BINORMAL                 0   xyz         3     NONE   float   xyz 
// NORMAL                   0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB4[3], immediateIndexed
dcl_constantbuffer CB5[2], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_temps 12
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s2
add r1.xyz, v1.xyzx, -cb1[5].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r2.x, r1.w
mul r1.xyz, r1.xyzx, r2.xxxx
dp3 r2.x, cb2[1].xyzx, cb2[1].xyzx
rsq r2.x, r2.x
mul r2.xyz, r2.xxxx, cb2[1].xyzx
dp3 r2.w, v2.xyzx, v2.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, v2.xyzx
dp3 r2.w, v3.xyzx, v3.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, v3.xyzx
dp3 r2.w, v4.xyzx, v4.xyzx
rsq r2.w, r2.w
mul r5.xyz, r2.wwww, v4.xyzx
sample_indexable(texture2d)(float,float,float,float) r6.xyz, v5.xyxx, t1.xyzw, s2
mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r6.yyyy
mad r3.xyz, r6.xxxx, r3.xyzx, r4.xyzx
mad r3.xyz, r6.zzzz, r5.xyzx, r3.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mad r2.w, r3.y, l(0.500000), l(0.500000)
add r4.xyz, cb4[0].xyzx, -cb4[1].xyzx
mad r4.xyz, r2.wwww, r4.xyzx, cb4[1].xyzx
mul r4.xyz, r4.xyzx, cb4[2].xxxx
mad r4.xyz, cb2[0].xyzx, cb0[4].xyzx, r4.xyzx
dp3 r2.w, r3.xyzx, -r2.xyzx
mad_sat r2.w, r2.w, l(0.500000), l(0.500000)
mul r5.xyz, r2.wwww, cb2[2].xyzx
dp3 r2.w, r2.xyzx, r3.xyzx
add r2.w, r2.w, r2.w
mad r2.xyz, r3.xyzx, -r2.wwww, r2.xyzx
dp3 r2.x, -r1.xyzx, r2.xyzx
max r2.x, r2.x, l(0.000000)
log r2.x, r2.x
mul r2.x, r2.x, l(128.000000)
exp r2.x, r2.x
mul r2.xyz, r2.xxxx, cb2[2].xyzx
mov r6.xyz, l(0,0,0,0)
mov r7.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.w, r2.w, l(8)
  breakc_nz r3.w
  imul null, r3.w, r2.w, l(3)
  add r8.xyz, v1.xyzx, -cb2[r3.w + 3].xyzx
  dp3 r4.w, r8.xyzx, r8.xyzx
  sqrt r4.w, r4.w
  ge r5.w, r4.w, cb2[r3.w + 5].x
  if_nz r5.w
    iadd r5.w, r2.w, l(1)
    mov r2.w, r5.w
    continue 
  endif 
  div r5.w, r4.w, cb2[r3.w + 5].x
  add_sat r5.w, -r5.w, l(1.000000)
  mul r5.w, r5.w, r5.w
  div r8.xyz, r8.xyzx, r4.wwww
  dp3_sat r4.w, r3.xyzx, -r8.xyzx
  mul r9.xyz, r4.wwww, cb2[r3.w + 4].xyzx
  mul r9.xyz, r9.xyzx, cb0[5].xyzx
  mad r6.xyz, r9.xyzx, r5.wwww, r6.xyzx
  dp3 r4.w, r8.xyzx, r3.xyzx
  add r4.w, r4.w, r4.w
  mad r8.xyz, r3.xyzx, -r4.wwww, r8.xyzx
  dp3 r4.w, -r1.xyzx, r8.xyzx
  max r4.w, r4.w, l(0.000000)
  log r4.w, r4.w
  mul r4.w, r4.w, l(128.000000)
  exp r4.w, r4.w
  mul r8.xyz, r4.wwww, cb2[r3.w + 4].xyzx
  mul r8.xyz, r8.xyzx, cb0[6].xyzx
  mad r7.xyz, r8.xyzx, r5.wwww, r7.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
mov r8.xyz, l(0,0,0,0)
mov r9.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.w, r2.w, l(8)
  breakc_nz r3.w
  ishl r3.w, r2.w, l(2)
  add r10.xyz, v1.xyzx, -cb2[r3.w + 27].xyzx
  dp3 r4.w, r10.xyzx, r10.xyzx
  sqrt r4.w, r4.w
  ge r5.w, r4.w, cb2[r3.w + 30].x
  if_nz r5.w
    iadd r5.w, r2.w, l(1)
    mov r2.w, r5.w
    continue 
  endif 
  div r5.w, r4.w, cb2[r3.w + 30].x
  add_sat r5.w, -r5.w, l(1.000000)
  mul r5.w, r5.w, r5.w
  div r10.xyz, r10.xyzx, r4.wwww
  dp3 r4.w, cb2[r3.w + 28].xyzx, cb2[r3.w + 28].xyzx
  rsq r4.w, r4.w
  mul r11.xyz, r4.wwww, cb2[r3.w + 28].xyzx
  dp3 r4.w, r11.xyzx, r10.xyzx
  add r6.w, -cb2[r3.w + 30].z, cb2[r3.w + 30].y
  add r4.w, -r4.w, cb2[r3.w + 30].y
  div r4.w, r4.w, r6.w
  add_sat r4.w, -r4.w, l(1.000000)
  mul r4.w, r4.w, r5.w
  dp3_sat r5.w, r3.xyzx, -r10.xyzx
  mul r11.xyz, r5.wwww, cb2[r3.w + 29].xyzx
  mul r11.xyz, r11.xyzx, cb0[5].xyzx
  mad r8.xyz, r11.xyzx, r4.wwww, r8.xyzx
  dp3 r5.w, r10.xyzx, r3.xyzx
  add r5.w, r5.w, r5.w
  mad r10.xyz, r3.xyzx, -r5.wwww, r10.xyzx
  dp3 r5.w, -r1.xyzx, r10.xyzx
  max r5.w, r5.w, l(0.000000)
  log r5.w, r5.w
  mul r5.w, r5.w, l(128.000000)
  exp r5.w, r5.w
  mul r10.xyz, r5.wwww, cb2[r3.w + 29].xyzx
  mul r10.xyz, r10.xyzx, cb0[6].xyzx
  mad r9.xyz, r10.xyzx, r4.wwww, r9.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
mad r1.xyz, r5.xyzx, cb0[5].xyzx, r6.xyzx
add r1.xyz, r8.xyzx, r1.xyzx
mad r1.xyz, r0.xyzx, r1.xyzx, r4.xyzx
mad r2.xyz, r2.xyzx, cb0[6].xyzx, r9.xyzx
add r2.xyz, r7.xyzx, r2.xyzx
add r0.xyz, r1.xyzx, r2.xyzx
sqrt r1.x, r1.w
add r1.x, r1.x, -cb5[1].x
add r1.y, -cb5[1].x, cb5[1].y
div_sat r1.x, r1.x, r1.y
add r2.xyzw, -r0.xyzw, cb5[0].xyzw
mad o0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
ret 
// Approximately 138 instruction slots used
